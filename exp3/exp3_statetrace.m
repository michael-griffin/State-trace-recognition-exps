%Created by Michael Griffin, 9/9/13

%Runs experiment 3 of the state-trace recognition experiments.
%Compared to experiment 2, presentation rates for each list have been altered:
%Now it's: Full: {'.15'} {'.3'} {'.6'} {'1.2'} Divided: {'.6'} {'1.2'} {'2.4'} {'4.8'}
%
%Requires:
%subject file in input/						(generated by input_ustatetrace.m)
%killkey.m									(ends experiment if you press Q)
%CogToolbox library added to Matlab path 	see: https://github.com/sfraundorf/CogToolbox


%Data saved to SubX_alldata.mat
%This saves multiple variables directly to load later, rather than writing a .csv file


%What's recorded:

%Space times: Written to allspacetimes, practicespacetimes and standalonespacetimes
%It follows the same form as schedule variable, with two extra columns.
%Column 6: 		records time to press space after a sound had been presented
%Column 7: 		records whether or not space had been pressed for that interval

%SoundTimes: Found in allsoundtimes. This gives the start times for each sound in Col 1.
%Lets one check that presentation rate of sounds is consistent, and check delay
%between stopping one sound to starting the next.

%Testlists: Built in input file, responses added to Cols 10-12
%Col 10:	RT
%Col 11:	time since list began
%Col 12:	participant's response


clear all
clc
subnum = input('Please enter the subject number.\n');

load(strcat('input/Subject', int2str(subnum), '_allfiles.mat'));
load('practice.mat');


waitTime2 = .5; %this is for the blank screen between study items.
testwaitTime = .5; %this is for the blank screen between test items.
promptTime = 1; %this is for the time that 'Color' or 'Old/New' appears before the word is presented at test.
InitializePsychSound;
audiofiles = {};
audiofreq = {};
alltesttimes = cell(length(testlists), 1); %Note, contains separate m,n cells, all gotten from 'testtimes'. 1st col is RT, 2nd col is rawTime, 3rd is resp, 4th is Cresp
alltrialtimes = cell(length(studylists), 1);
allspacetimes = cell(length(studylists), 1); %only needed for Divided Attention lists, so some empty cells.
allsoundtimes = cell(length(studylists), 1); %only needed for Divided Attention lists, so some empty cells.
practicetesttimes = cell(2,1);
practicetrialtimes = cell(2,1); %practicespacetimes initialized in the actual practice code. As are standalonesoundtimes and practicesoundtimes
for n = 1:5
    [currentfile, audiofreq{n,1}] = wavread(strcat('stimuli/', int2str(n), '.wav'));
    audiofiles{n,1} = currentfile'; %playing the sound requires it to be transposed.
end
numchannels = size(audiofiles{n}, 1);

audiochannel = PsychPortAudio('Open', [], 1, [], audiofreq{1,1}, numchannels); %move this back into the actual loop if frequencies vary.
%PsychPortAudio('Close', audiochannel);

[windowPtr,rect] = Screen(0, 'OpenWindow', [],[]);
Screen('Preference', 'DefaultTextYPositionIsBaseline', 1);

ScreenHeight = RectHeight(rect);
ScreenWidth = RectWidth(rect);
xPos = ScreenWidth/2;
yPos = ScreenHeight/2;

white=WhiteIndex(windowPtr);
black=BlackIndex(windowPtr);

textFont = 'Arial';
textSize = 40;
WordColor = black;

%Note that subjects will always be giving an 'old' response to
%currentcolor1
if rem(subnum, 2) == 0
    swcol1 = [55, 255, 55];
    swcol2 = [255, 50, 50];
    currentcol1 = 'Green';
    currentcol2 = 'Red';
else
    swcol1 = [255, 50, 50];
    swcol2 = [55, 255, 55];
    currentcol1 = 'Red';
    currentcol2 = 'Green';
end
%Needed for test and study responses.
spaceKey = KbName('space');
cKey = KbName('c');
nKey = KbName('n');
dKey = KbName('d');
jKey = KbName('j');

HideCursor;


Screen('TextSize', windowPtr, textSize-10);
Screen('TextFont', windowPtr, textFont);
Screen('Flip', windowPtr, [], 1);
pause(2);
Screen('TextSize', windowPtr, 25);
WriteLine(windowPtr, ['In this experiment, you will study a series of ', int2str(lrec), ...
 	' words that you need to learn for an upcoming memory test.  Each word will '...
	'appear on the screen for a few seconds and then disappear.  Words will ' ...
	'be presented in one of two colors, and it is important to remember both the ' ...
	'word and the color it was presented in for the memory test.'], WordColor, 100, 175, 75, 1.3);
WriteLine(windowPtr, ['Sometimes, you will also hear a series of tones while ' ...
	'you are studying. Whenever you hear a tone that matches the one just before ' ...
	'it, you''ll need to press the Space Bar. It is important to pay attention both ' ...
	'to studying the words and to listening for tone repetitions.'], WordColor, 100, 175, 350, 1.3);
Screen('Flip', windowPtr, [], 1);
pause(1.5);
WriteCentered(windowPtr, 'Press any key when you are ready to continue.' , xPos, ScreenHeight-100, WordColor);
Screen('Flip', windowPtr);
wait = KbWait;
Screen('Flip', windowPtr);
pause(waitTime2);






%%%%START OF PRACTICE FOR DIVIDED ATTENTION TASK, GIVES FEEDBACK
%Setting up Visual Display
actbounds = [32,41,192,79];

rectdist = 50;
rectcoords = zeros(4,2);
rectcoords(:,1) = [xPos - actbounds(3) - rectdist/2; yPos-actbounds(4)/2; xPos-rectdist/2; yPos+actbounds(4)/2];
rectcoords(:,2) = [xPos + rectdist/2; yPos-actbounds(4)/2; xPos+actbounds(3)+rectdist/2; yPos+actbounds(4)/2];

textcoords = zeros(4,2);
textcoords(1,:) = rectcoords(1,:)+15;
textcoords(2,:) = rectcoords(2,:)+15;
textcoords(3,:) = rectcoords(3,:)-15;
textcoords(4,:) = rectcoords(4,:)-20;

labelcoords = textcoords; %ycoords get overwritten below
labelcoords(2,:) = rectcoords(2,:)-25;
labelcoords(4,:) = rectcoords(4,:)-actbounds(4)-25; %Some of this is redundant, realistically only need start positions. Labels should appear above boxes



% %Start of Standalone task
Screen('TextSize', windowPtr, 20);
WriteLine(windowPtr, ['To get you familiar with the tone task, there will '...
	'be a short practice on just this task. The first few tones will be at ' ...
	'half speed, and give prompts on when to Press Space.'], WordColor, 75, 75, 160, 1.3);
WriteCentered(windowPtr, 'Press any key to continue.' , xPos, ScreenHeight-100, WordColor);
Screen('Flip', windowPtr);
pause(1);
wait = KbWait;
WriteLine(windowPtr, ['The first few tones will also be listed in the visual ' ...
	'display below. The right box will list the current tone, while the left ' ...
	'box will list the tone you heard just before it. If the two match, you ' ...
	'should press space. The rest of the practice will be the same task as ' ...
	'that of the experiment -- faster, and with no display or prompts.'], WordColor, 100, 100, 70, 1.3);
WriteCentered(windowPtr, 'Press any key when you are ready to start practice.' , xPos, ScreenHeight-100, WordColor);
Screen('FrameRect', windowPtr, [0 0 0], rectcoords, 4);
Screen('TextSize', windowPtr, textSize);
Screen('DrawText', windowPtr, '1 Back', labelcoords(1,1), labelcoords(4,1), [0 0 0]);
Screen('DrawText', windowPtr, 'Current', labelcoords(1,2), labelcoords(4,2), [0 0 0]);
Screen('Flip', windowPtr);
pause(1);
wait = KbWait;
Screen('Flip', windowPtr);
pause(waitTime2);

%Displays the blank Squares for 2 seconds prior to task to familiarize people
Screen('FrameRect', windowPtr, [0 0 0], rectcoords, 4);
Screen('DrawText', windowPtr, '1 Back', labelcoords(1,1), labelcoords(4,1), [0 0 0]);
Screen('DrawText', windowPtr, 'Current', labelcoords(1,2), labelcoords(4,2), [0 0 0]);
Screen('Flip', windowPtr, [], 1);
pause(2.6);
Screen('DrawText', windowPtr, 'Tone 1', textcoords(1,2), textcoords(4,2), [0 0 0]);
Screen('Flip', windowPtr, [], 1);

currentsound = audiofiles{1,1};
PsychPortAudio('FillBuffer', audiochannel, currentsound);
PsychPortAudio('Start',audiochannel,1) %1 is number of times it is played.
pause(2.6);

%2nd Trial
Screen('Flip', windowPtr);
Screen('FrameRect', windowPtr, [0 0 0], rectcoords, 4);
Screen('DrawText', windowPtr, '1 Back', labelcoords(1,1), labelcoords(4,1), [0 0 0]);
Screen('DrawText', windowPtr, 'Current', labelcoords(1,2), labelcoords(4,2), [0 0 0]);
Screen('DrawText', windowPtr, 'Tone 1', textcoords(1,1), textcoords(4,1), [0 0 0]);
Screen('DrawText', windowPtr, 'Tone 2', textcoords(1,2), textcoords(4,2), [0 0 0]);
Screen('Flip', windowPtr, [], 1);

currentsound = audiofiles{2,1};
PsychPortAudio('FillBuffer', audiochannel, currentsound);
PsychPortAudio('Start',audiochannel,1)

soundstart = tic;
timeleft = 2.6;
responsemade = 0;

while toc(soundstart) < timeleft
    [keyIsDown, seconds, keyCode] = KbCheck;
    killkey %Killkey is a a small script that will stop the program when q is pressed.
    if keyIsDown
        if keyCode(spaceKey)
            responsemade = 1;
            currentRT = toc(soundstart);
        end
    end
end



%3rd Trial
Screen('Flip', windowPtr);
Screen('FrameRect', windowPtr, [0 0 0], rectcoords, 4);
Screen('DrawText', windowPtr, '1 Back', labelcoords(1,1), labelcoords(4,1), [0 0 0]);
Screen('DrawText', windowPtr, 'Current', labelcoords(1,2), labelcoords(4,2), [0 0 0]);
Screen('DrawText', windowPtr, 'Tone 2', textcoords(1,1), textcoords(4,1), [0 0 0]);
Screen('DrawText', windowPtr, 'Tone 2', textcoords(1,2), textcoords(4,2), [0 0 0]);
WriteCentered(windowPtr, ['Same tone, Press Space!'], xPos, yPos + 100, [255, 90, 90]);
Screen('Flip', windowPtr, [], 1);

currentsound = audiofiles{2,1};
PsychPortAudio('FillBuffer', audiochannel, currentsound);
PsychPortAudio('Start',audiochannel,1) %1 is number of times it is played.

soundstart = tic;
timeleft = 2.6;
responsemade = 0;
while toc(soundstart) < timeleft
    [keyIsDown, seconds, keyCode] = KbCheck;
    killkey
    if keyIsDown
        if keyCode(spaceKey)
            responsemade = 1;
            currentRT = toc(soundstart);
        end
    end
    if responsemade
        WriteCentered(windowPtr, 'Success', xPos, yPos+200, WordColor);
        Screen('Flip', windowPtr, [], 1);
    end
end
pause(timeleft - toc(soundstart));



%4th Trial
Screen('Flip', windowPtr);
Screen('FrameRect', windowPtr, [0 0 0], rectcoords, 4);
Screen('DrawText', windowPtr, '1 Back', labelcoords(1,1), labelcoords(4,1), [0 0 0]);
Screen('DrawText', windowPtr, 'Current', labelcoords(1,2), labelcoords(4,2), [0 0 0]);
Screen('DrawText', windowPtr, 'Tone 2', textcoords(1,1), textcoords(4,1), [0 0 0]);
Screen('DrawText', windowPtr, 'Tone 2', textcoords(1,2), textcoords(4,2), [0 0 0]);
WriteCentered(windowPtr, ['Same tone, Press Space!'], xPos, yPos + 100, [255, 90, 90]);
Screen('Flip', windowPtr, [], 1);

currentsound = audiofiles{2,1};
PsychPortAudio('FillBuffer', audiochannel, currentsound);
PsychPortAudio('Start',audiochannel,1) %1 is number of times it is played.

soundstart = tic;
timeleft = 2.6;
responsemade = 0;
while toc(soundstart) < timeleft
    [keyIsDown, seconds, keyCode] = KbCheck;
    killkey
    if keyIsDown
        if keyCode(spaceKey)
            responsemade = 1;
            currentRT = toc(soundstart);
        end
    end
    if responsemade
        WriteCentered(windowPtr, 'Success', xPos, yPos+200, WordColor);
        Screen('Flip', windowPtr, [], 1);
    end
end
pause(timeleft - toc(soundstart));


%5th Trial
Screen('Flip', windowPtr);
Screen('FrameRect', windowPtr, [0 0 0], rectcoords, 4);
Screen('DrawText', windowPtr, '1 Back', labelcoords(1,1), labelcoords(4,1), [0 0 0]);
Screen('DrawText', windowPtr, 'Current', labelcoords(1,2), labelcoords(4,2), [0 0 0]);
Screen('DrawText', windowPtr, 'Tone 2', textcoords(1,1), textcoords(4,1), [0 0 0]);
Screen('DrawText', windowPtr, 'Tone 3', textcoords(1,2), textcoords(4,2), [0 0 0]);
Screen('Flip', windowPtr);

currentsound = audiofiles{3,1};
PsychPortAudio('FillBuffer', audiochannel, currentsound);
PsychPortAudio('Start',audiochannel,1)
pause(2.6);
Screen('Flip', windowPtr);




%Instructions for the rest of Standalone Practice
Screen('TextSize', windowPtr, 25);
WriteLine(windowPtr, ['The rest of this practice will be at regular speed, with no prompts.'] , WordColor, 150, 175, 275, 1.3);
WriteCentered(windowPtr, 'Press any key when you are ready to continue.' , xPos, ScreenHeight-100, WordColor);
Screen('Flip', windowPtr);
wait = KbWait;
Screen('Flip', windowPtr);
pause(waitTime2);
Screen('TextSize', windowPtr, textSize);
firsttone = 0;
secondtone = 0;
thirdn = 0;
currentschedule = standaloneschedule;
currentsoundlist = standalonesounds;
spacetimes = [currentschedule cell(length(currentschedule), 4)]; %
soundtimes = cell(length(currentsoundlist),2);
p = 0; %used to stop sounds.
for n = 1:length(standalonesounds)

    start = tic;
    if p > 0
        PsychPortAudio('Stop',audiochannel,1);
        soundtimes{p,2} = toc(start);
    end

    p = p + 1;
    currentsound = audiofiles{currentsoundlist{p,1},1};

    PsychPortAudio('FillBuffer', audiochannel, currentsound);
    PsychPortAudio('Start',audiochannel,1)
    soundtimes{p,1} = toc(start);

    soundstart = tic;
    timeleft = currentschedule{n,2};
    responsemade = 0;
    while toc(soundstart) < timeleft
        [keyIsDown, seconds, keyCode] = KbCheck;
        killkey
        if keyIsDown
            if keyCode(spaceKey)
                responsemade = 1;
                currentRT = toc(soundstart);
            end
        end
    end

    if ~responsemade
        spacetimes{n,6} = -1;
        spacetimes{n,7} = 'no space';
    else
        spacetimes{n,6} = currentRT;
        spacetimes{n,7} = 'space';
    end

end

standalonesoundtimes = soundtimes;
standalonespacetimes = spacetimes;
Screen('Flip', windowPtr);



%START OF PRACTICE
for n = 2 %Currently only running the second practice list (which has sounds accompanying it).
    if n == 1
        Screen('TextSize', windowPtr, 25);
        WriteLine(windowPtr, ['Now a short practice study phase will start. Remember, ' ...
		'words will be presented in one of two colors, and it is important to remember ' ...
		'both the word and the color it was presented in for the memory test.'], WordColor, 100, 175, 100, 1.3);
        WriteCentered(windowPtr, 'Press any key when you are ready to begin the practice study phase.' , xPos, ScreenHeight-100, WordColor);
        Screen('Flip', windowPtr);
        wait = KbWait;
        Screen('Flip', windowPtr);
        pause(2);
    else
        Screen('TextSize', windowPtr, 25);
        WriteLine(windowPtr, ['Now a practice study phase will start. In this one, ' ...
		'you will again be hearing a series of tones while studying. Once again, ' ...
		'remember to press the Space Bar each time the current tone matches the one ' ...
		'heard just before it.'], WordColor, 100, 175, 100, 1.3);
        WriteCentered(windowPtr, 'Press any key when you are ready to begin the next study phase.' , xPos, ScreenHeight-100, WordColor);
        Screen('Flip', windowPtr);
        Screen('TextSize', windowPtr, 40);
        wait = KbWait;
        Screen('Flip', windowPtr);
        pause(1);
    end

    start = tic;
    currentlist = practicelists{n,1};
    currentschedule = practiceschedules{n,1};
    presrate =  2.5;
    practicepresrate = presrate;
    o = 1;                              %counter for trials
    soundsleft = 0;
    trialtimes = cell(length(currentlist),2);


    if strcmp(currentlist{1,2}, 'Divided')
        currentsoundlist = practicesoundlist;
        p = 0;                                  %counter for sounds
        soundsleft = 1;
        soundtimes = cell(length(currentsoundlist),2);
        spacetimes = [currentschedule cell(length(currentschedule), 2)];
    end


    for q = 1:length(currentschedule)
        if strcmp(currentschedule{q,4}, 'start')
            trialtimes{o,1} = toc(start);


            if strcmp(currentlist{o,3}, '1')
                wordcol = swcol1;
            else
                wordcol = swcol2;
            end
            Screen('TextSize', windowPtr, 40);
            WriteCentered(windowPtr, currentlist{o,1}, xPos, yPos, wordcol);
            Screen('Flip', windowPtr);


            if strcmp(currentlist{1,2}, 'Divided')
                trialstart = tic;
                timeleft = currentschedule{q,2};
                responsemade = 0;
                while toc(trialstart) < timeleft
                    [keyIsDown, seconds, keyCode] = KbCheck;
                    killkey
                    if keyIsDown

                        if keyCode(spaceKey)
                            responsemade = 1;
                            currentRT = toc(soundstart);
                        end
                    end
                end
                if ~responsemade
                    spacetimes{q,6} = -1;
                    spacetimes{q,7} = 'no space';
                else
                    spacetimes{q,6} = currentRT;
                    spacetimes{q,7} = 'space';
                end
            else
                trialstart = tic;
                timeleft = currentschedule{q,2};
                while toc(trialstart) < timeleft
                    [keyIsDown, seconds, keyCode] = KbCheck;
                    killkey
                end
            end

        elseif strcmp(currentschedule{q,4}, 'stop')
            trialtimes{o,2} = toc(start);
            o = o + 1;
            Screen('Flip', windowPtr);


            if strcmp(currentlist{1,2}, 'Divided')
                trialstart = tic;
                timeleft = currentschedule{q,2};
                responsemade = 0;
                while toc(trialstart) < timeleft

                    [keyIsDown, seconds, keyCode] = KbCheck;
                    killkey
                    if keyIsDown
                        if keyCode(spaceKey)
                            responsemade = 1;
                            currentRT = toc(soundstart);
                        end
                    end
                end
                if ~responsemade
                    spacetimes{q,6} = -1;
                    spacetimes{q,7} = 'no space';
                else
                    spacetimes{q,6} = currentRT;
                    spacetimes{q,7} = 'space';
                end
            else
                pause(currentschedule{q,2});
            end

        else %if a sound
            if p > 0
                PsychPortAudio('Stop',audiochannel,1);
                soundtimes{p,2} = toc(start);
            end

            p = p + 1;
            currentsound = audiofiles{currentsoundlist{p,1},1};

            PsychPortAudio('FillBuffer', audiochannel, currentsound);
            PsychPortAudio('Start',audiochannel,1)
            soundtimes{p,1} = toc(start);

            soundstart = tic;
            trialstart = tic;
            timeleft = currentschedule{q,2};
            responsemade = 0;
            while toc(trialstart) < timeleft

                [keyIsDown, seconds, keyCode] = KbCheck;
                killkey
                if keyIsDown
                    if keyCode(spaceKey)
                        responsemade = 1;
                        currentRT = toc(soundstart);
                    end
                end
            end

            if ~responsemade
                spacetimes{q,6} = -1;
                spacetimes{q,7} = 'no space';
            else
                spacetimes{q,6} = currentRT;
                spacetimes{q,7} = 'space';
            end
        end

    end
    practicetrialtimes{n,1} = trialtimes;

    if n == 2
        practicespacetimes = spacetimes;
        practicesoundtimes = soundtimes;

        indexes = zeros(length(practicesoundlist), 1);
        t = 1;
        for s = 1:length(practicespacetimes)
            if strcmp(practicespacetimes{s,4}, 'sound')
                indexes(t,1) = s;
                t = t + 1;
            end
        end


        for s = 1:length(indexes)
            if s ~= length(indexes)
                trials  = practicespacetimes(indexes(s):indexes(s+1)-1,:);
            else
                trials = practicespacetimes(indexes(s),:);
            end
            numtri = size(trials, 1);

            spaceresp = 0;
            for t = 1:numtri
                if strcmp(trials{t,7}, 'space')
                    spaceresp = 1;
                end
            end
            if strcmp(practicespacetimes{indexes(s), 5}, 'correct')
                if spaceresp
                    practicesoundlist{s,3} = 1;
                    practicesoundlist{s,4} = 'hit';
                else
                    practicesoundlist{s,3} = 0;
                    practicesoundlist{s,4} = 'miss';
                end
            else %if not 3
                if spaceresp
                    practicesoundlist{s,3} = 0;
                    practicesoundlist{s,4} = 'fa'; %false alarm
                else
                    practicesoundlist{s,3} = 1;
                    practicesoundlist{s,4} = 'cr'; %correct rejection
                end
            end
            practicesoundlist{s,5} = practicespacetimes{indexes(s),6};
        end


        overallacc = 0;
        misscount = 0;
        hitcount = 0;
        facount = 0;
        crcount = 0;

        for s = 1:length(practicesoundlist)
            resp = practicesoundlist{s,4};
            switch resp
                case 'hit'
                    hitcount = hitcount + 1;
                case 'miss'
                    misscount = misscount + 1;
                case 'fa'
                    facount = facount + 1;
                case 'cr'
                    crcount = crcount + 1;
            end
        end


        percentfa = round( 100 * (facount/(facount + crcount)));
        percentmiss = round( 100 * (misscount/(misscount + hitcount)));
        overallacc =  100 - (percentfa + percentmiss)/2;
        Screen('TextSize', windowPtr, 25);
        pause(2);
        if percentfa || percentmiss > 40
             WriteLine(windowPtr, ['Your accuracy for the tone task was a bit low. ' ...
			 'If you find yourself focusing solely on the words, try to focus more ' ...
			 'on listening to the tones. Remember, both tasks are equally important, ' ...
			 'and you should be attending about equally to both of them.'], WordColor, 100, 175, 300, 1.3);
        else
             WriteLine(windowPtr, ['Your accuracy for this list was good. Once again, ' ...
			 'remember to try and pay about equal attention to the numbers task and ' ...
			 'studying the words themselves.'], WordColor, 100, 175, 300, 1.3);
        end

        WriteCentered(windowPtr, 'Press any key when you are ready continue to the test.' , xPos, ScreenHeight-100, WordColor);
        Screen('Flip', windowPtr);
        wait = KbWait;
        Screen('Flip', windowPtr);
    end




    Screen('TextSize', windowPtr, 25);
    WriteLine(windowPtr, ['Now a practice test phase will begin. You will be asked ' ...
	'to either say whether a word was one you had studied, or to say what color the ' ...
	'studied word was.  For words prompted with Color, you should press d if they ' ...
	'were ',  currentcol1, ' or j if they were ', currentcol2, '. For words prompted ' ...
	'with Old/New, you should press c if they were studied, and n if they were new.'], WordColor, 100, 175, 100, 1.3);
    Screen('Flip', windowPtr, [], 1);
    pause(5);
    WriteCentered(windowPtr, 'Press any key when you are ready to begin the test phase.' , xPos, ScreenHeight-100, WordColor);
    Screen('Flip', windowPtr);
    Screen('TextSize', windowPtr, 40);

    wait = KbWait;
    pause(1);
    start = tic;
    currenttlist = practicetestlists{n,1};
    testtimes = cell(length(currenttlist), 3);

    for r = 1:length(currenttlist)

        if strcmp(currenttlist{r,5}, 'oldnew')
            WriteCentered(windowPtr, 'Old/New', xPos, yPos-125, WordColor);
        else
            WriteCentered(windowPtr, 'Color', xPos, yPos-125, WordColor);
        end
        Screen('TextSize', windowPtr, 22);
        WriteLine(windowPtr, 'Old Response: ''c''', WordColor, 30, 30, yPos+180, 1.3);
        WriteLine(windowPtr, 'New Response: ''n''', WordColor, 30, 30, yPos+220, 1.3);
        WriteLine(windowPtr, strcat(currentcol1, ' Response: ''d'''), WordColor, 30, 30, yPos+260, 1.3);
        WriteLine(windowPtr, strcat(currentcol2, ' Response: ''j'''), WordColor, 30, 30, yPos+300, 1.3);

        Screen('TextSize', windowPtr, 40);
        Screen('Flip', windowPtr, [], 1);
        pause(promptTime);

        WriteCentered(windowPtr, currenttlist{r,1}, xPos, yPos, WordColor); %test words presented in black,
        Screen('Flip', windowPtr, [], 1);

        trialstart = tic;
        timeleft = 5;
        responsemade = 0;
        while responsemade == 0

            [keyIsDown, seconds, keyCode] = KbCheck;
            killkey
            if strcmp(currenttlist{r,5}, 'oldnew')
                if keyIsDown
                    if keyCode(cKey)
                        responsemade = 1;
                        response = 'c';
                        currentRT = toc(trialstart);
                        break;
                    elseif keyCode(nKey)
                        responsemade = 1;
                        response = 'n';
                        currentRT = toc(trialstart);
                        break;
                    end
                end
            else		%If color judgment
                if keyCode(dKey)
                    responsemade = 1;
                    response = 'd';
                    currentRT = toc(trialstart);
                    break;
                elseif keyCode(jKey)
                    responsemade = 1;
                    response = 'j';
                    currentRT = toc(trialstart);
                    break;
                end
            end
        end

        if strcmp(currenttlist{r,5}, 'oldnew')
            if strcmp(response, 'c')
                WriteCentered(windowPtr, 'Response: Old', xPos, yPos+175, WordColor);
            else
                WriteCentered(windowPtr, 'Response: New', xPos, yPos+175, WordColor);
            end
        else
            if strcmp(response, 'd')
                WriteCentered(windowPtr, ['Response: ', currentcol1], xPos, yPos+175, WordColor); %Lets participants know what color they responded.
            else
                WriteCentered(windowPtr, ['Response: ', currentcol2], xPos, yPos+175, WordColor);
            end
        end

        Screen('Flip', windowPtr);
        pause(1);
        Screen('Flip', windowPtr);
        pause(testwaitTime);

        rawtime = toc(start);
        if ~responsemade
            currentRT = -1;
            testtimes{r,3} = '';
        else
            testtimes{r,3} = response;
        end
        testtimes{r,1} = currentRT;
        testtimes{r,2} = rawtime;
    end
    practicetestlists{n,1}(:,10:12) = testtimes;

end

%%%%END OF PRACTICE





%%%%START OF EXPERIMENT INSTRUCTIONS
Screen('TextSize', windowPtr, 25);
WriteLine(windowPtr, ['Now the actual experiment will begin. Sometimes, like the practice,' ...
		'you will both study words and hear tones presented, while sometimes there will ' ...
		'only be words to study. At the start of each study phase, you''ll be told which ' ...
		'will be coming up. If both words and numbers will be presented, remember to pay ' ...
		'about equal attention to both.'], WordColor, 100, 175, 100, 1.3);
WriteLine(windowPtr, ['As before, try to remember both the word and the color for the ' ...
		'following memory test.'], WordColor, 100, 175, 400, 1.3);
WriteCentered(windowPtr, 'Press any key when you are ready to continue.' , xPos, ScreenHeight-100, WordColor);
Screen('Flip', windowPtr);
wait = KbWait;
pause(1);




%Beginning the exeriment trials.
for n = 1:length(studylists)
    start = tic;
    currentlist = studylists{n,1};
    currentschedule = schedules{n,1};
    presrate = str2double(currentlist{1,4});
    o = 1; %counter for trials
    soundsleft = 0;
    trialtimes = cell(length(currentlist),2);


    if strcmp(currentlist{1,2}, 'Divided')
        Screen('TextSize', windowPtr, 25);
        WriteLine(windowPtr, ['In this study phase, you will also be hearing a ' ...
		'series of tones while studying. Once again, remember to press the ' ...
		'Space Bar each time the tone you hear matches the one just before it.'], WordColor, 100, 175, 100, 1.3);
        WriteCentered(windowPtr, 'Press any key when you are ready to begin the study phase.' , xPos, ScreenHeight-100, WordColor);
        Screen('Flip', windowPtr);
        Screen('TextSize', windowPtr, 40);
        wait = KbWait;
        Screen('Flip', windowPtr);
        pause(1);

        currentsoundlist = soundlists{str2double(currentlist{n,7})-4};
        p = 0; %counter for sounds
        soundsleft = 1;
        soundtimes = cell(length(currentsoundlist),2);
        spacetimes = [currentschedule cell(length(currentschedule), 2)];%added so that one can record
    else
        Screen('TextSize', windowPtr, 25);
        WriteLine(windowPtr, 'In this study phase, you will only be studying words. Once again, try to remember both the word and the color for the following memory test.', WordColor, 100, 175, 100, 1.3);
        WriteCentered(windowPtr, 'Press any key when you are ready to begin the study phase.' , xPos, ScreenHeight-100, WordColor);
        Screen('Flip', windowPtr);
        Screen('TextSize', windowPtr, 40);
        wait = KbWait;
        Screen('Flip', windowPtr);
        pause(1);
    end


    for q = 1:length(currentschedule)
        if strcmp(currentschedule{q,4}, 'start')
            trialtimes{o,1} = toc(start);


            if strcmp(currentlist{o,3}, '1')
                wordcol = swcol1;
            else
                wordcol = swcol2;
            end
            Screen('TextSize', windowPtr, 40);
            WriteCentered(windowPtr, currentlist{o,1}, xPos, yPos, wordcol);
            Screen('Flip', windowPtr);


            if strcmp(currentlist{1,2}, 'Divided')
                trialstart = tic;
                timeleft = currentschedule{q,2};
                responsemade = 0;
                while toc(trialstart) < timeleft

                    [keyIsDown, seconds, keyCode] = KbCheck;
                    killkey
                    if keyIsDown
                        if keyCode(spaceKey)
                            responsemade = 1;
                            currentRT = toc(soundstart);
                        end
                    end
                end
                if ~responsemade
                    spacetimes{q,6} = -1;
                    spacetimes{q,7} = 'no space';
                else
                    spacetimes{q,6} = currentRT; %trialstart initiated in the sound lines
                    spacetimes{q,7} = 'space';
                end
            else
                trialstart = tic;
                timeleft = currentschedule{q,2};
                while toc(trialstart) < timeleft
                    [keyIsDown, seconds, keyCode] = KbCheck;
                    killkey
                end
            end

        elseif strcmp(currentschedule{q,4}, 'stop')
            trialtimes{o,2} = toc(start);
            o = o + 1;
            Screen('Flip', windowPtr);


            if strcmp(currentlist{1,2}, 'Divided')
                trialstart = tic;
                timeleft = currentschedule{q,2};
                responsemade = 0;
                while toc(trialstart) < timeleft
                    [keyIsDown, seconds, keyCode] = KbCheck;
                    killkey
                    if keyIsDown
                        if keyCode(spaceKey)
                            responsemade = 1;

                            currentRT = toc(soundstart);
                        end
                    end
                end
                if ~responsemade
                    spacetimes{q,6} = -1;
                    spacetimes{q,7} = 'no space';
                else
                    spacetimes{q,6} = currentRT;
                    spacetimes{q,7} = 'space';
                end
            else
                pause(currentschedule{q,2});
            end

        else %if a sound
            if p > 0
                PsychPortAudio('Stop',audiochannel,1);
                soundtimes{p,2} = toc(start);
            end

            p = p + 1;
            currentsound = audiofiles{currentsoundlist{p,1},1};

            PsychPortAudio('FillBuffer', audiochannel, currentsound);
            PsychPortAudio('Start',audiochannel,1)
            soundtimes{p,1} = toc(start);

            soundstart = tic;
            trialstart = tic;
            timeleft = currentschedule{q,2};
            responsemade = 0;
            while toc(trialstart) < timeleft
                [keyIsDown, seconds, keyCode] = KbCheck;
                killkey
                if keyIsDown
                    if keyCode(spaceKey)
                        responsemade = 1;
                        currentRT = toc(soundstart);
                    end
                end
            end

            if ~responsemade
                spacetimes{q,6} = -1;
                spacetimes{q,7} = 'no space';
            else
                spacetimes{q,6} = currentRT;
                spacetimes{q,7} = 'space';
            end
        end

    end
    alltrialtimes{n,1} = trialtimes;


    %Calculating accuracy for sound task.
    if strcmp(currentlist{1,2}, 'Divided')
        allspacetimes{n,1} = spacetimes;
        allsoundtimes{n,1} = soundtimes;
        indexes = zeros(length(currentsoundlist), 1);
        t = 1;
        for s = 1:length(spacetimes)
            if strcmp(spacetimes{s,4}, 'sound')
                indexes(t,1) = s;
                t = t + 1;
            end
        end


        for s = 1:length(indexes)
            if s ~= length(indexes)
                trials = spacetimes(indexes(s):indexes(s+1)-1,:);
            else
                trials = spacetimes(indexes(s),:);
            end
            numtri = size(trials, 1);

            spaceresp = 0;
            for t = 1:numtri
                if strcmp(trials{t,7}, 'space')
                    spaceresp = 1;
                end
            end
            if strcmp(spacetimes{indexes(s), 5}, 'correct')
                if spaceresp
                    currentsoundlist{s,3} = 1;
                    currentsoundlist{s,4} = 'hit';

                else
                    currentsoundlist{s,3} = 0;
                    currentsoundlist{s,4} = 'miss';

                end
            else %if not 3
                if spaceresp
                    currentsoundlist{s,3} = 0;
                    currentsoundlist{s,4} = 'fa';
                else
                    currentsoundlist{s,3} = 1;
                    currentsoundlist{s,4} = 'cr';
                end
            end
            currentsoundlist{s,5} = spacetimes{indexes(s), 6}; %RT
        end

        soundlists{str2double(currentlist{n,7})-4} = currentsoundlist;
        overallacc = 0;
        misscount = 0;
        hitcount = 0;
        facount = 0;
        crcount = 0;

        for s = 1:length(currentsoundlist)
            resp = currentsoundlist{s,4};
            switch resp
                case 'hit'
                    hitcount = hitcount + 1;
                case 'miss'
                    misscount = misscount + 1;
                case 'fa'
                    facount = facount + 1;
                case 'cr'
                    crcount = crcount + 1;
            end
        end


        percentfa = round( 100 * (facount/(facount + crcount)));
        percentmiss = round( 100 * (misscount/(misscount + hitcount)));
        Screen('TextSize', windowPtr, 25);
        pause(2);
        if percentfa || percentmiss > 40
            WriteLine(windowPtr, ['Your accuracy for the tone task was a bit low. ' ...
			'If you find yourself focusing solely on the words, try to focus more ' ...
			'on listening to the tones. Remember, both tasks are equally important, ' ...
			'and you should be attending about equally to both of them.'], WordColor, 100, 175, 300, 1.3);
        else
            WriteLine(windowPtr, 'Your accuracy for this list was good. Once again, remember to try and pay about equal attention to the digit task and studying the words themselves.', WordColor, 100, 175, 300, 1.3);
        end
    end

    check = 0;
    q = 1;
    while ~check
        if strcmp(testlists{q,1}{1,7}, currentlist{1,7})
            check = 1;
            currenttlist = testlists{q,1};
            currenttestnum = q;
        end
        q = q + 1;
    end

    Screen('TextSize', windowPtr, 25);
    WriteCentered(windowPtr, 'Press any key when you are ready to begin the test phase.' , xPos, ScreenHeight-100, WordColor);
    Screen('Flip', windowPtr);
    wait = KbWait;
    start = tic;
    testtimes = cell(length(currenttlist), 3);
    Screen('TextSize', windowPtr, 40);
    for r = 1:length(currenttlist)

        if strcmp(currenttlist{r,5}, 'oldnew')
            WriteCentered(windowPtr, 'Old/New', xPos, yPos-125, WordColor);
        else %ie, if a color judgment
            WriteCentered(windowPtr, 'Color', xPos, yPos-125, WordColor);
        end
        Screen('TextSize', windowPtr, 22);
        WriteLine(windowPtr, 'Old Response: ''c''', WordColor, 30, 30, yPos+180, 1.3);
        WriteLine(windowPtr, 'New Response: ''n''', WordColor, 30, 30, yPos+220, 1.3);
        WriteLine(windowPtr, strcat(currentcol1, ' Response: ''d'''), WordColor, 30, 30, yPos+260, 1.3);
        WriteLine(windowPtr, strcat(currentcol2, ' Response: ''j'''), WordColor, 30, 30, yPos+300, 1.3);

        Screen('TextSize', windowPtr, 40);

        Screen('Flip', windowPtr, [], 1);
        pause(promptTime);


        WriteCentered(windowPtr, currenttlist{r,1}, xPos, yPos, WordColor); %test words presented in black,
        Screen('Flip', windowPtr, [], 1);

        trialstart = tic;
        cKey = KbName('c');
        nKey = KbName('n');
        timeleft = 5;
        responsemade = 0;
        while responsemade == 0

            [keyIsDown, seconds, keyCode] = KbCheck;
            killkey
            if strcmp(currenttlist{r,5}, 'oldnew')
                if keyIsDown
                    if keyCode(cKey)
                        responsemade = 1;
                        response = 'c';
                        currentRT = toc(trialstart);
                        break;
                    elseif keyCode(nKey)
                        responsemade = 1;
                        response = 'n';
                        currentRT = toc(trialstart);
                        break;
                    end
                end
            else
                if keyIsDown
                    if keyCode(dKey)
                        responsemade = 1;
                        response = 'd';
                        currentRT = toc(trialstart);
                        break;
                    elseif keyCode(jKey)
                        responsemade = 1;
                        response = 'j';
                        currentRT = toc(trialstart);
                        break;
                    end
                end
            end
        end

         if strcmp(currenttlist{r,5}, 'oldnew')
            if strcmp(response, 'c')
                WriteCentered(windowPtr, 'Response: Old', xPos, yPos+175, WordColor);
            else
                WriteCentered(windowPtr, 'Response: New', xPos, yPos+175, WordColor);
            end
        else %ie, if a color judgment
            if strcmp(response, 'd')
                WriteCentered(windowPtr, ['Response: ', currentcol1], xPos, yPos+175, WordColor);
            else
                WriteCentered(windowPtr, ['Response: ', currentcol2], xPos, yPos+175, WordColor);
            end
        end

        Screen('Flip', windowPtr);
        pause(1);
        Screen('Flip', windowPtr);
        pause(testwaitTime);


        rawtime = toc(start);
        if ~responsemade
            currentRT = -1;
            testtimes{r,3} = '';
        else
            testtimes{r,3} = response;
        end
        testtimes{r,1} = currentRT;
        testtimes{r,2} = rawtime;
    end
    testlists{currenttestnum,1}(:, 10:12) = testtimes;
    alltesttimes{n,1} = testtimes;
end

Screen('Flip', windowPtr);
WriteLine(windowPtr, 'The experiment is complete, thanks for participating!', WordColor, 200, 175, 275, 1.3);
Screen('Flip', windowPtr);
wait = KbWait;
dataName = strcat('Sub', int2str(subnum), '_alldata.mat');
save(dataName, 'alltesttimes', 'allspacetimes', 'allsoundtimes', 'alltrialtimes', ...
    'practicespacetimes', 'practicetesttimes', 'practicetrialtimes', 'standalonesoundtimes',  ...
    'standalonespacetimes', 'studylists', 'testlists', 'soundlists', 'schedules', 'buffer', 'rate', ...
    'waitTime2', 'testwaitTime', 'promptTime');
sca;
